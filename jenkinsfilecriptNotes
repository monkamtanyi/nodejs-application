//Code - Build - Test - CodeQualityReport - UploadArtifacts - Deployment - Email Notification
//This pipeline script written in groovy. Now if we have many projects, it means we go thro each stage. But we can write 
common script that can be refereced to build other scripts.


node
{
 
  stage("CheckOutCodeGit") {
   sh "start of project"
  sh "This is a java project for boa"
  git 'https://github.com/LandmarkTechnology/wep-app'   // used to pull the code from github = Code pull
}
 
 stage("Test+Build") {
   // Building with maven
  // sh "mvn validate"
  // sh "mvn compile"
  // sh "mvn test"     note mvn package will execute the 3 commands above which is commented.
     sh "mvn package"  

    }
 
 
  stage('CodeQualityReport') {
   sh " echo running code quality report analysis"
  // sh "sonar:sonar    sonar plugin and sonar goal to execute sonar report"   
   
    }
      
        } 
		
    stage('UploadArtifacts') {
      sh " echo uploading artifacts in nexus"
       sh "mvn deploy"
      }	
 
 stage('Development') {
  sh "echo app now ready for deployment"
// in deploying the application we just copy the application code from the build server (web-app dir) to
//the deployment server (web-server dir)
    sh "scp app.war ec2-user@172.28.19.2:/opt/tomcat9/webapps/"
    }
stage ('Notification'){
sh "mail"     // mail is a command in linux
sh "echo slackchannel"    //to also notify members on slack channels
    
  }
}
Doing the above jenkins pipeline Script is a tedious process, especially as we have many projects. to solve this we use 
Jenkins Shared Libraries JSL:
Jekins Shared Libraries is a concept of having a common pipeline code in the version control system that can be used 
by any number of pipelines just by referencing it. Infact, multiple teams can use the same library for their pipelines.
It is just like calling a function.
programming and scripting languages that we have done in landmark
- bash-shell scripting
-groovy

How do we set up JSL:
-Create shared libraries     jSL has a variable vars dir 
- configure Library
- Use Library in pipeline script

Creating Shared Libraries:
IN the var dir, we have a script called the common groovy, this has steps common to all the stages which can be used for
automation.
//common.groovy   this is the name of the shared library
// under we are calling each fn (eg sh "mvn clean package") based on the string stage name. u can run many commands 
at each stage (eg lile sh " echo running code quality report analysis")
def call(String stageName){
  
  if ("${stageName}" == "Build") {
       sh "mvn clean package"
     }
  else if ("${stageName}" == "SonarQube Report")   {
        sh " echo running code quality report analysis"
       sh "mvn clean sonar:sonar"
     }
  else if ("${stageName}" == "Upload Into Nexus")
     {
       sh "mvn clean deploy"
     }
}

Above is creating a shared libraries, next configure library:
copy the repo were the jenkins library is found
https://github.com/monkamtanyi/JenkinsSharedLibraries
goto jkbrowser,db>managejk>configure system>global pipeline libraries>libraryname= monkamtanyiSS-Sharedlibs  (u can have multiple libraries) >
default version=master-allow defaut version overriden, include@library changes in job recent changes.>
retrieval methoe=modernscm>git>enter jenkins library repo - https://github.com/monkamtanyi/JenkinsSharedLibraries>enter
cred?>save>jenkins shared library is configured.
Next:select a project or lets create one called ebay-bts>pipeline project>ok>conf>ok>pipeline>

Jenkinsfile start jenkinsfile for shared libraries like this  (SS =software solution)
//@Library('LibraryName') _
@Library('monkamtanyiSS-Sharedlibs') _
pipeline{                   //we are going to create a declarative pipeline
agent any
tools{
     maven "maven3.9.6"
  }
stages{
 stage('gitPull') {   //we want to pull d code from our PubGithubRepo
    steps {
        sh "echo start of ebay-bts project"
          git 'https://github.com/monkamtanyi/maven-web-application_public'
        //git pull is not part of my shared library, if u check the library file there is no stage as git pull, so pull the repo from git)
       //CTrl+C copy pipelinscript Ctrl+V =paste in jkPipeline>
     }
  }
      stage('Build') {  
    steps{
        common("Build")    // u can decide to change the name common.groovy to cdc.groovy, but remember to use cdc in 
   }                             d place of common. this applies to stages and Build.
  }
  stage('Execute SonarQube Report') {
    steps{   
         sh " echo running code quality report analysis"
      // common("SonarQube Report")
    }
 }
  stage('Upload Artifacts Into Nexus') {
     steps {
         sh " echo uploading artifacts"
         //common("Upload Into Nexus")
       }
    }
 }
}
if you go to the jenkinsSharedlibrary folder you will see 
common.groovy
build.groovy
stage.groovy.
if u call d fn from common then d step will be common, if i cll the fn from build, the step will be build, follows
same for stage.

lets call the fn from build
@Library('monkamtanyiSS-Sharedlibs') _
pipeline{                   //we are going to create a declarative pipeline
agent any
tools{
     maven "maven3.9.6"
  }
stages{
 stage('gitPull') {   //we want to pull d code from our PubGithubRepo
    steps {
        sh "echo start of ebay-bts project"
          git 'https://github.com/monkamtanyi/maven-web-application_public'
        //git pull is not part of my shared library, if u check the library file there is no stage as git pull, so pull the repo from git)
       //CTrl+C copy pipelinscript Ctrl+V =paste in jkPipeline>
     }
  }
      stage('Clean') {  
    steps{
        build("Clean")
   }
  }
  stage('Compile') {
    steps{   
         sh " echo running compile"
      // build("Compile")
    }
 }
  stage('Test') {
     steps {
         sh " echo uploading artifacts"
         //build("Test")
       }
    }
     stage('Package') {
     steps {
         sh " echo uploading artifacts"
         //build("Package")
       }
   }
  }
}

we can also call d fn from stages:

@Library('monkamtanyiSS-Sharedlibs') _
pipeline{                   //we are going to create a declarative pipeline
agent any
tools{
     maven "maven3.9.6"
  }
stages{
 stage('gitPull') {   //we want to pull d code from our PubGithubRepo
    steps {
        sh "echo start of ebay-bts project"
          git 'https://github.com/monkamtanyi/maven-web-application_public'
        //git pull is not part of my shared library, if u check the library file there is no stage as git pull, so pull the repo from git)
       //CTrl+C copy pipelinscript Ctrl+V =paste in jkPipeline>
     }
  }
      stage('Build') {  
    steps{
        stages("Build")
   }
  }
  stage('SonarQube Report') {
    steps{   
         sh " echo running code quality report analysis"
      // stages("SonarQube Report")
    }
 }
  stage('Upload Into Nexus') {
     steps {
         sh " echo uploading artifacts"
         //stages("Upload Into Nexus")
       }
    }
 }
}

we have seen java appliications which we call java projects now lets go to 
nodejs applications which we call nodeJS Projects:

nodejs appication -------> nodeJS Projects

nodejs-APP                VS                   Java-APP               in landmark we use maven to build in java-app and in
npm                       =                     maven or gradle  --->  Build   nodejs-app we use npm(node package manager)
package.json                                    pom.xml                 Build Script BS when doing a build u need a BS
npm install                                     mvn package             creating packages
npm test                                        mvn test                 run unit test cases
npm run sonar                                   mvn sonar:sonar           SonarQube CodeQualityReport
npm publish                                     mvn deploy                uploading artifacts

The BS is pom.xml using maven and package.json using the node package manager.
Nest we do a pipeling project using nodejs application.

src + BS + test cases
sudo yum install nodejs npm -y  = //[jenskins@cd ~]$sudo yum install nodejs npm -y

db>newItem>name=ebaynodejs-app>pipeline>save>pipeline script>

node {
  stage('CodeCheckout'){
   sh "echo running ebay nodeJS projet"   lets get a Purepo and use git to clone it from github, u don't need credentials as
       git 'https://github.com/LandmarkTechnology/nodejs-application'      as it is a PrivateRepo and it runs in d master branch
     // git 'https://github.com/monkamtnayi/nodejs-application'          forked repo
  }
    Stage (UnitTest') {    //u may want to run unit test cases b4 build
        sh "echo unit test cases successful" 
        //sh "npm test"   canot run bcos no test cases is specified - there is no test cases
}

   Stage ('Build') { 
    sh "echo creating build artifacts"   // we are doing scripted pipeline Build. install nodejs in jk b4 do bill
   nodejs(nodeJSInstallationJame: 'nodejs17')
     sh "npm install"                             // now copy the script to the pipeline script job>buildNow
  }                                           //to get latest version of npm>goto db>manage jk>gobal tool conf>nodejs>
}                                            {if y don't see nodejs goto plugin and install nodejs)> nodejs installation>
stage('Quality Report') {                     u will see the current version>(goto jenkins server and version check
   sh "echo CodeQualityReport"              $npm -verdion) goback to jk browser >add NodsJS>nodejs17 -the version u see>
nodejs(nodeJSInstallationJame: 'nodejs17')  save, u can now use this latest nodejs version in ur jk jobs - call the latest
 sh 'npm run sonar'                          verion as shown left side (nodejs(nodeJSInstallationJame: 'nodejs17')).
  }                                            Next step sonarqubereport>nodejs-application repo>sonar-project.js>edit>goto 
}                                            sonar server browser and copy url or use ipaddress and insert(just belowsonqube-
stage('UploadArtifacts')                      scanner} (sonar-project.js =pom.xml). next create a token (u can as well
sh "echo npm packages Uploaded"               use sonar.login= admin and passwd admin- better to create a token>goto sonar
 nodejs(nodeJSInstallationJame: 'nodejs17')    browser>administration>security>uses>under or in admin>token>name-nodejs>
  sh 'npm publish'                              generate>copy token>goto sonar-project.js and replace d token>commit changes.
//jenkins nexus integration *                                                copy to pipbeline script>apply>save>buildNow>got sonaqube server in browser
//passwd = Admin123, username=admin                                                and check for the report' what is ur job- I have been maintaining, updation
                                                  modify and customize jenkinspipeline jobes and jenkins shared libraries.
                                                  when u create a nodejs application it generates npm packages.
                                                  * goto nexus server in browser>create repo>npm(hosted)>name=ebay-npm-repo>
                                                deployment policy=allow redeploy>create>copy repoUrl>goto project>
                                                package.json =pom.xml>insertUrl in registry under nodejsexample>commit>
                                                 u can change passwd>account>iD=admin>firstName=Administrator>LastName=User>
                                                  Email>changePasswd>admin>admin123>now chaneTo>Admin@123
                                                We can create a token for passwd and username>use a command in base64
                                               software. goto nodejs-application repo>views>Readme.md>

